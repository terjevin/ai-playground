// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String
  image                 String?
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  twoFactorConfirmed    Boolean   @default(false)
  role                  String    @default("user")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  sessions              Session[]
  apiKeys               UserApiKey[]
  chatSessions          ChatSession[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserApiKey {
  id            String    @id @default(cuid())
  userId        String
  provider      String    // e.g., "openai", "anthropic", etc.
  encryptedKey  String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
}

model ChatSession {
  id            String    @id @default(cuid())
  userId        String
  title         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id            String    @id @default(cuid())
  sessionId     String
  role          String    // "user", "assistant", "system"
  encryptedContent String  // Encrypted message content
  timestamp     DateTime  @default(now())
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

